// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: pkg/dashproto/dashproto.proto

package dashproto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ErrorCode int32

const (
	ErrorCode_EC_NONE        ErrorCode = 0
	ErrorCode_EC_EOF         ErrorCode = 1
	ErrorCode_EC_UNKNOWN     ErrorCode = 2
	ErrorCode_EC_BADCONNID   ErrorCode = 3
	ErrorCode_EC_ACCACCESS   ErrorCode = 4
	ErrorCode_EC_NOHANDLER   ErrorCode = 5
	ErrorCode_EC_UNAVAILABLE ErrorCode = 6
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "EC_NONE",
		1: "EC_EOF",
		2: "EC_UNKNOWN",
		3: "EC_BADCONNID",
		4: "EC_ACCACCESS",
		5: "EC_NOHANDLER",
		6: "EC_UNAVAILABLE",
	}
	ErrorCode_value = map[string]int32{
		"EC_NONE":        0,
		"EC_EOF":         1,
		"EC_UNKNOWN":     2,
		"EC_BADCONNID":   3,
		"EC_ACCACCESS":   4,
		"EC_NOHANDLER":   5,
		"EC_UNAVAILABLE": 6,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_dashproto_dashproto_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_pkg_dashproto_dashproto_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{0}
}

type RRAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts         int64  `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
	ActionType string `protobuf:"bytes,2,opt,name=ActionType,proto3" json:"ActionType,omitempty"` // "setdata", "event", "invalidate", "panel", "auth"
	Selector   string `protobuf:"bytes,3,opt,name=Selector,proto3" json:"Selector,omitempty"`     // path, selector, controlid
	JsonData   string `protobuf:"bytes,4,opt,name=JsonData,proto3" json:"JsonData,omitempty"`
	EventType  string `protobuf:"bytes,5,opt,name=EventType,proto3" json:"EventType,omitempty"` // only set for "event" ActionType
	Html       string `protobuf:"bytes,6,opt,name=Html,proto3" json:"Html,omitempty"`           // for "panel" ActionType
	Err        string `protobuf:"bytes,7,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *RRAction) Reset() {
	*x = RRAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRAction) ProtoMessage() {}

func (x *RRAction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRAction.ProtoReflect.Descriptor instead.
func (*RRAction) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{0}
}

func (x *RRAction) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *RRAction) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *RRAction) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *RRAction) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *RRAction) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *RRAction) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *RRAction) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type SendResponseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts           int64       `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
	ReqId        string      `protobuf:"bytes,2,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	PanelName    string      `protobuf:"bytes,3,opt,name=PanelName,proto3" json:"PanelName,omitempty"`
	FeClientId   string      `protobuf:"bytes,4,opt,name=FeClientId,proto3" json:"FeClientId,omitempty"`
	ResponseDone bool        `protobuf:"varint,5,opt,name=ResponseDone,proto3" json:"ResponseDone,omitempty"`
	Actions      []*RRAction `protobuf:"bytes,6,rep,name=Actions,proto3" json:"Actions,omitempty"`
	Err          string      `protobuf:"bytes,7,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (x *SendResponseMessage) Reset() {
	*x = SendResponseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponseMessage) ProtoMessage() {}

func (x *SendResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponseMessage.ProtoReflect.Descriptor instead.
func (*SendResponseMessage) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{1}
}

func (x *SendResponseMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *SendResponseMessage) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *SendResponseMessage) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *SendResponseMessage) GetFeClientId() string {
	if x != nil {
		return x.FeClientId
	}
	return ""
}

func (x *SendResponseMessage) GetResponseDone() bool {
	if x != nil {
		return x.ResponseDone
	}
	return false
}

func (x *SendResponseMessage) GetActions() []*RRAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SendResponseMessage) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type RequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts          int64     `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
	AccId       string    `protobuf:"bytes,2,opt,name=AccId,proto3" json:"AccId,omitempty"`
	ZoneName    string    `protobuf:"bytes,3,opt,name=ZoneName,proto3" json:"ZoneName,omitempty"`
	PanelName   string    `protobuf:"bytes,4,opt,name=PanelName,proto3" json:"PanelName,omitempty"`
	RequestType string    `protobuf:"bytes,5,opt,name=RequestType,proto3" json:"RequestType,omitempty"` // "data", "handler", "streamopen", "streamclose", "panel", "servermessage"
	Path        string    `protobuf:"bytes,6,opt,name=Path,proto3" json:"Path,omitempty"`
	ReqId       string    `protobuf:"bytes,7,opt,name=ReqId,proto3" json:"ReqId,omitempty"`
	FeClientId  string    `protobuf:"bytes,8,opt,name=FeClientId,proto3" json:"FeClientId,omitempty"`
	ControlId   string    `protobuf:"bytes,9,opt,name=ControlId,proto3" json:"ControlId,omitempty"`
	JsonData    string    `protobuf:"bytes,10,opt,name=JsonData,proto3" json:"JsonData,omitempty"`
	AuthData    string    `protobuf:"bytes,11,opt,name=AuthData,proto3" json:"AuthData,omitempty"`
	Err         string    `protobuf:"bytes,12,opt,name=Err,proto3" json:"Err,omitempty"`                                       // only used for server-side errors
	ErrCode     ErrorCode `protobuf:"varint,13,opt,name=ErrCode,proto3,enum=dashborg.rpc1.ErrorCode" json:"ErrCode,omitempty"` // only used for server-side errors
	TimeoutMs   int64     `protobuf:"varint,14,opt,name=TimeoutMs,proto3" json:"TimeoutMs,omitempty"`
	DataPaths   []string  `protobuf:"bytes,15,rep,name=DataPaths,proto3" json:"DataPaths,omitempty"`
}

func (x *RequestMessage) Reset() {
	*x = RequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMessage) ProtoMessage() {}

func (x *RequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMessage.ProtoReflect.Descriptor instead.
func (*RequestMessage) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{2}
}

func (x *RequestMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *RequestMessage) GetAccId() string {
	if x != nil {
		return x.AccId
	}
	return ""
}

func (x *RequestMessage) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *RequestMessage) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *RequestMessage) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *RequestMessage) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RequestMessage) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RequestMessage) GetFeClientId() string {
	if x != nil {
		return x.FeClientId
	}
	return ""
}

func (x *RequestMessage) GetControlId() string {
	if x != nil {
		return x.ControlId
	}
	return ""
}

func (x *RequestMessage) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *RequestMessage) GetAuthData() string {
	if x != nil {
		return x.AuthData
	}
	return ""
}

func (x *RequestMessage) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *RequestMessage) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_EC_NONE
}

func (x *RequestMessage) GetTimeoutMs() int64 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *RequestMessage) GetDataPaths() []string {
	if x != nil {
		return x.DataPaths
	}
	return nil
}

type HandlerKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PanelName   string `protobuf:"bytes,1,opt,name=PanelName,proto3" json:"PanelName,omitempty"`
	HandlerType string `protobuf:"bytes,2,opt,name=HandlerType,proto3" json:"HandlerType,omitempty"` // "data", "handler", "stream", "panel"
	Path        string `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *HandlerKey) Reset() {
	*x = HandlerKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlerKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerKey) ProtoMessage() {}

func (x *HandlerKey) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlerKey.ProtoReflect.Descriptor instead.
func (*HandlerKey) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{3}
}

func (x *HandlerKey) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *HandlerKey) GetHandlerType() string {
	if x != nil {
		return x.HandlerType
	}
	return ""
}

func (x *HandlerKey) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RegisterHandlerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts       int64         `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
	Handlers []*HandlerKey `protobuf:"bytes,2,rep,name=Handlers,proto3" json:"Handlers,omitempty"`
}

func (x *RegisterHandlerMessage) Reset() {
	*x = RegisterHandlerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHandlerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHandlerMessage) ProtoMessage() {}

func (x *RegisterHandlerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHandlerMessage.ProtoReflect.Descriptor instead.
func (*RegisterHandlerMessage) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterHandlerMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *RegisterHandlerMessage) GetHandlers() []*HandlerKey {
	if x != nil {
		return x.Handlers
	}
	return nil
}

type RegisterHandlerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Err     string    `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
	ErrCode ErrorCode `protobuf:"varint,3,opt,name=ErrCode,proto3,enum=dashborg.rpc1.ErrorCode" json:"ErrCode,omitempty"`
}

func (x *RegisterHandlerResponse) Reset() {
	*x = RegisterHandlerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterHandlerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterHandlerResponse) ProtoMessage() {}

func (x *RegisterHandlerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterHandlerResponse.ProtoReflect.Descriptor instead.
func (*RegisterHandlerResponse) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterHandlerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterHandlerResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *RegisterHandlerResponse) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_EC_NONE
}

type ProcMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts            int64             `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
	ProcRunId     string            `protobuf:"bytes,2,opt,name=ProcRunId,proto3" json:"ProcRunId,omitempty"`
	AccId         string            `protobuf:"bytes,3,opt,name=AccId,proto3" json:"AccId,omitempty"`
	ZoneName      string            `protobuf:"bytes,4,opt,name=ZoneName,proto3" json:"ZoneName,omitempty"`
	AnonAcc       bool              `protobuf:"varint,5,opt,name=AnonAcc,proto3" json:"AnonAcc,omitempty"`
	ProcName      string            `protobuf:"bytes,6,opt,name=ProcName,proto3" json:"ProcName,omitempty"`
	ProcTags      map[string]string `protobuf:"bytes,7,rep,name=ProcTags,proto3" json:"ProcTags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HostData      map[string]string `protobuf:"bytes,8,rep,name=HostData,proto3" json:"HostData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTs       int64             `protobuf:"varint,9,opt,name=StartTs,proto3" json:"StartTs,omitempty"`
	Handlers      []*HandlerKey     `protobuf:"bytes,10,rep,name=Handlers,proto3" json:"Handlers,omitempty"`
	ClientVersion string            `protobuf:"bytes,11,opt,name=ClientVersion,proto3" json:"ClientVersion,omitempty"`
}

func (x *ProcMessage) Reset() {
	*x = ProcMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcMessage) ProtoMessage() {}

func (x *ProcMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcMessage.ProtoReflect.Descriptor instead.
func (*ProcMessage) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{6}
}

func (x *ProcMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ProcMessage) GetProcRunId() string {
	if x != nil {
		return x.ProcRunId
	}
	return ""
}

func (x *ProcMessage) GetAccId() string {
	if x != nil {
		return x.AccId
	}
	return ""
}

func (x *ProcMessage) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *ProcMessage) GetAnonAcc() bool {
	if x != nil {
		return x.AnonAcc
	}
	return false
}

func (x *ProcMessage) GetProcName() string {
	if x != nil {
		return x.ProcName
	}
	return ""
}

func (x *ProcMessage) GetProcTags() map[string]string {
	if x != nil {
		return x.ProcTags
	}
	return nil
}

func (x *ProcMessage) GetHostData() map[string]string {
	if x != nil {
		return x.HostData
	}
	return nil
}

func (x *ProcMessage) GetStartTs() int64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *ProcMessage) GetHandlers() []*HandlerKey {
	if x != nil {
		return x.Handlers
	}
	return nil
}

func (x *ProcMessage) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type ProcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Err     string    `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
	ErrCode ErrorCode `protobuf:"varint,3,opt,name=ErrCode,proto3,enum=dashborg.rpc1.ErrorCode" json:"ErrCode,omitempty"`
	ConnId  string    `protobuf:"bytes,4,opt,name=ConnId,proto3" json:"ConnId,omitempty"`
}

func (x *ProcResponse) Reset() {
	*x = ProcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcResponse) ProtoMessage() {}

func (x *ProcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcResponse.ProtoReflect.Descriptor instead.
func (*ProcResponse) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{7}
}

func (x *ProcResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ProcResponse) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_EC_NONE
}

func (x *ProcResponse) GetConnId() string {
	if x != nil {
		return x.ConnId
	}
	return ""
}

type RequestStreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts int64 `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
}

func (x *RequestStreamMessage) Reset() {
	*x = RequestStreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStreamMessage) ProtoMessage() {}

func (x *RequestStreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStreamMessage.ProtoReflect.Descriptor instead.
func (*RequestStreamMessage) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{8}
}

func (x *RequestStreamMessage) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type SendResponseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool      `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Err     string    `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
	ErrCode ErrorCode `protobuf:"varint,3,opt,name=ErrCode,proto3,enum=dashborg.rpc1.ErrorCode" json:"ErrCode,omitempty"`
}

func (x *SendResponseResponse) Reset() {
	*x = SendResponseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_dashproto_dashproto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponseResponse) ProtoMessage() {}

func (x *SendResponseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_dashproto_dashproto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponseResponse.ProtoReflect.Descriptor instead.
func (*SendResponseResponse) Descriptor() ([]byte, []int) {
	return file_pkg_dashproto_dashproto_proto_rawDescGZIP(), []int{9}
}

func (x *SendResponseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SendResponseResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *SendResponseResponse) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_EC_NONE
}

var File_pkg_dashproto_dashproto_proto protoreflect.FileDescriptor

var file_pkg_dashproto_dashproto_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x22, 0xb6,
	0x01, 0x0a, 0x08, 0x52, 0x52, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x54,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x74, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x52, 0x52, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x22, 0xb4, 0x03, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x63, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x63, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x45, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e,
	0x72, 0x70, 0x63, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x60, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5f, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63,
	0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x45,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x12, 0x32, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xa0, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x63, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x63, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6e, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x41, 0x6e, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x63, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72,
	0x72, 0x12, 0x32, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70,
	0x63, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0x26, 0x0a,
	0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x54, 0x73, 0x22, 0x76, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x7e, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x43,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x43, 0x5f, 0x45, 0x4f,
	0x46, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x43, 0x5f, 0x42, 0x41, 0x44, 0x43, 0x4f, 0x4e,
	0x4e, 0x49, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x43, 0x5f, 0x4e, 0x4f,
	0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x43, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x32, 0xec, 0x02,
	0x0a, 0x0f, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x1a, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67,
	0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e,
	0x72, 0x70, 0x63, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70,
	0x63, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2e,
	0x72, 0x70, 0x63, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x72, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x77, 0x6b, 0x61,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x72, 0x67, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_dashproto_dashproto_proto_rawDescOnce sync.Once
	file_pkg_dashproto_dashproto_proto_rawDescData = file_pkg_dashproto_dashproto_proto_rawDesc
)

func file_pkg_dashproto_dashproto_proto_rawDescGZIP() []byte {
	file_pkg_dashproto_dashproto_proto_rawDescOnce.Do(func() {
		file_pkg_dashproto_dashproto_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_dashproto_dashproto_proto_rawDescData)
	})
	return file_pkg_dashproto_dashproto_proto_rawDescData
}

var file_pkg_dashproto_dashproto_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_dashproto_dashproto_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pkg_dashproto_dashproto_proto_goTypes = []interface{}{
	(ErrorCode)(0),                  // 0: dashborg.rpc1.ErrorCode
	(*RRAction)(nil),                // 1: dashborg.rpc1.RRAction
	(*SendResponseMessage)(nil),     // 2: dashborg.rpc1.SendResponseMessage
	(*RequestMessage)(nil),          // 3: dashborg.rpc1.RequestMessage
	(*HandlerKey)(nil),              // 4: dashborg.rpc1.HandlerKey
	(*RegisterHandlerMessage)(nil),  // 5: dashborg.rpc1.RegisterHandlerMessage
	(*RegisterHandlerResponse)(nil), // 6: dashborg.rpc1.RegisterHandlerResponse
	(*ProcMessage)(nil),             // 7: dashborg.rpc1.ProcMessage
	(*ProcResponse)(nil),            // 8: dashborg.rpc1.ProcResponse
	(*RequestStreamMessage)(nil),    // 9: dashborg.rpc1.RequestStreamMessage
	(*SendResponseResponse)(nil),    // 10: dashborg.rpc1.SendResponseResponse
	nil,                             // 11: dashborg.rpc1.ProcMessage.ProcTagsEntry
	nil,                             // 12: dashborg.rpc1.ProcMessage.HostDataEntry
}
var file_pkg_dashproto_dashproto_proto_depIdxs = []int32{
	1,  // 0: dashborg.rpc1.SendResponseMessage.Actions:type_name -> dashborg.rpc1.RRAction
	0,  // 1: dashborg.rpc1.RequestMessage.ErrCode:type_name -> dashborg.rpc1.ErrorCode
	4,  // 2: dashborg.rpc1.RegisterHandlerMessage.Handlers:type_name -> dashborg.rpc1.HandlerKey
	0,  // 3: dashborg.rpc1.RegisterHandlerResponse.ErrCode:type_name -> dashborg.rpc1.ErrorCode
	11, // 4: dashborg.rpc1.ProcMessage.ProcTags:type_name -> dashborg.rpc1.ProcMessage.ProcTagsEntry
	12, // 5: dashborg.rpc1.ProcMessage.HostData:type_name -> dashborg.rpc1.ProcMessage.HostDataEntry
	4,  // 6: dashborg.rpc1.ProcMessage.Handlers:type_name -> dashborg.rpc1.HandlerKey
	0,  // 7: dashborg.rpc1.ProcResponse.ErrCode:type_name -> dashborg.rpc1.ErrorCode
	0,  // 8: dashborg.rpc1.SendResponseResponse.ErrCode:type_name -> dashborg.rpc1.ErrorCode
	7,  // 9: dashborg.rpc1.DashborgService.Proc:input_type -> dashborg.rpc1.ProcMessage
	2,  // 10: dashborg.rpc1.DashborgService.SendResponse:input_type -> dashborg.rpc1.SendResponseMessage
	5,  // 11: dashborg.rpc1.DashborgService.RegisterHandler:input_type -> dashborg.rpc1.RegisterHandlerMessage
	9,  // 12: dashborg.rpc1.DashborgService.RequestStream:input_type -> dashborg.rpc1.RequestStreamMessage
	8,  // 13: dashborg.rpc1.DashborgService.Proc:output_type -> dashborg.rpc1.ProcResponse
	10, // 14: dashborg.rpc1.DashborgService.SendResponse:output_type -> dashborg.rpc1.SendResponseResponse
	6,  // 15: dashborg.rpc1.DashborgService.RegisterHandler:output_type -> dashborg.rpc1.RegisterHandlerResponse
	3,  // 16: dashborg.rpc1.DashborgService.RequestStream:output_type -> dashborg.rpc1.RequestMessage
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_dashproto_dashproto_proto_init() }
func file_pkg_dashproto_dashproto_proto_init() {
	if File_pkg_dashproto_dashproto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_dashproto_dashproto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlerKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHandlerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterHandlerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_dashproto_dashproto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_dashproto_dashproto_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_dashproto_dashproto_proto_goTypes,
		DependencyIndexes: file_pkg_dashproto_dashproto_proto_depIdxs,
		EnumInfos:         file_pkg_dashproto_dashproto_proto_enumTypes,
		MessageInfos:      file_pkg_dashproto_dashproto_proto_msgTypes,
	}.Build()
	File_pkg_dashproto_dashproto_proto = out.File
	file_pkg_dashproto_dashproto_proto_rawDesc = nil
	file_pkg_dashproto_dashproto_proto_goTypes = nil
	file_pkg_dashproto_dashproto_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DashborgServiceClient is the client API for DashborgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DashborgServiceClient interface {
	Proc(ctx context.Context, in *ProcMessage, opts ...grpc.CallOption) (*ProcResponse, error)
	SendResponse(ctx context.Context, in *SendResponseMessage, opts ...grpc.CallOption) (*SendResponseResponse, error)
	RegisterHandler(ctx context.Context, in *RegisterHandlerMessage, opts ...grpc.CallOption) (*RegisterHandlerResponse, error)
	// this is backwards since the server sends requests, and the client responds to them
	RequestStream(ctx context.Context, in *RequestStreamMessage, opts ...grpc.CallOption) (DashborgService_RequestStreamClient, error)
}

type dashborgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashborgServiceClient(cc grpc.ClientConnInterface) DashborgServiceClient {
	return &dashborgServiceClient{cc}
}

func (c *dashborgServiceClient) Proc(ctx context.Context, in *ProcMessage, opts ...grpc.CallOption) (*ProcResponse, error) {
	out := new(ProcResponse)
	err := c.cc.Invoke(ctx, "/dashborg.rpc1.DashborgService/Proc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashborgServiceClient) SendResponse(ctx context.Context, in *SendResponseMessage, opts ...grpc.CallOption) (*SendResponseResponse, error) {
	out := new(SendResponseResponse)
	err := c.cc.Invoke(ctx, "/dashborg.rpc1.DashborgService/SendResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashborgServiceClient) RegisterHandler(ctx context.Context, in *RegisterHandlerMessage, opts ...grpc.CallOption) (*RegisterHandlerResponse, error) {
	out := new(RegisterHandlerResponse)
	err := c.cc.Invoke(ctx, "/dashborg.rpc1.DashborgService/RegisterHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashborgServiceClient) RequestStream(ctx context.Context, in *RequestStreamMessage, opts ...grpc.CallOption) (DashborgService_RequestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DashborgService_serviceDesc.Streams[0], "/dashborg.rpc1.DashborgService/RequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dashborgServiceRequestStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DashborgService_RequestStreamClient interface {
	Recv() (*RequestMessage, error)
	grpc.ClientStream
}

type dashborgServiceRequestStreamClient struct {
	grpc.ClientStream
}

func (x *dashborgServiceRequestStreamClient) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DashborgServiceServer is the server API for DashborgService service.
type DashborgServiceServer interface {
	Proc(context.Context, *ProcMessage) (*ProcResponse, error)
	SendResponse(context.Context, *SendResponseMessage) (*SendResponseResponse, error)
	RegisterHandler(context.Context, *RegisterHandlerMessage) (*RegisterHandlerResponse, error)
	// this is backwards since the server sends requests, and the client responds to them
	RequestStream(*RequestStreamMessage, DashborgService_RequestStreamServer) error
}

// UnimplementedDashborgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDashborgServiceServer struct {
}

func (*UnimplementedDashborgServiceServer) Proc(context.Context, *ProcMessage) (*ProcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proc not implemented")
}
func (*UnimplementedDashborgServiceServer) SendResponse(context.Context, *SendResponseMessage) (*SendResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResponse not implemented")
}
func (*UnimplementedDashborgServiceServer) RegisterHandler(context.Context, *RegisterHandlerMessage) (*RegisterHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHandler not implemented")
}
func (*UnimplementedDashborgServiceServer) RequestStream(*RequestStreamMessage, DashborgService_RequestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestStream not implemented")
}

func RegisterDashborgServiceServer(s *grpc.Server, srv DashborgServiceServer) {
	s.RegisterService(&_DashborgService_serviceDesc, srv)
}

func _DashborgService_Proc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashborgServiceServer).Proc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashborg.rpc1.DashborgService/Proc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashborgServiceServer).Proc(ctx, req.(*ProcMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashborgService_SendResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResponseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashborgServiceServer).SendResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashborg.rpc1.DashborgService/SendResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashborgServiceServer).SendResponse(ctx, req.(*SendResponseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashborgService_RegisterHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHandlerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashborgServiceServer).RegisterHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashborg.rpc1.DashborgService/RegisterHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashborgServiceServer).RegisterHandler(ctx, req.(*RegisterHandlerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashborgService_RequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestStreamMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DashborgServiceServer).RequestStream(m, &dashborgServiceRequestStreamServer{stream})
}

type DashborgService_RequestStreamServer interface {
	Send(*RequestMessage) error
	grpc.ServerStream
}

type dashborgServiceRequestStreamServer struct {
	grpc.ServerStream
}

func (x *dashborgServiceRequestStreamServer) Send(m *RequestMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _DashborgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dashborg.rpc1.DashborgService",
	HandlerType: (*DashborgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proc",
			Handler:    _DashborgService_Proc_Handler,
		},
		{
			MethodName: "SendResponse",
			Handler:    _DashborgService_SendResponse_Handler,
		},
		{
			MethodName: "RegisterHandler",
			Handler:    _DashborgService_RegisterHandler_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestStream",
			Handler:       _DashborgService_RequestStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/dashproto/dashproto.proto",
}
